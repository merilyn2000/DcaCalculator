@page "/dca-calculator"

@rendermode InteractiveServer

@using DcaCalculator.Models
@using DcaCalculator
@using DcaCalculator.Services
@using Microsoft.EntityFrameworkCore
@using System.Globalization

@inject ICryptoPriceService CryptoPriceService
@inject IJSRuntime JSRuntime

<h3 class="text-primary text-center mt-4">Dollar Cost Averaging Investment</h3>

<div class="container my-4">
    <a href="/" class="btn btn-primary btn-primary mb-4">Go back</a>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="cryptoSelect" class="form-label">Please select the cryptocurrency:</label>
            <select @bind="selectedCryptoSymbol" id="cryptoSelect" class="form-select">
                @foreach (var crypto in cryptocurrencies)
                {
                    <option value="@crypto.Key">@crypto.Value (@crypto.Key)</option>
                }
            </select>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="startDate" class="form-label">Start date:</label>
            <input type="date" @bind="startDate" id="startDate" class="form-control" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="monthlyInvestment" class="form-label">Amount invested monthly:</label>
            <input type="number" @bind="monthlyInvestment" id="monthlyInvestment" class="form-control" />
        </div>
    </div>

    <div class="text-center">
        <button @onclick="Calculate" class="btn btn-primary mt-3">Calculate</button>
    </div>

    @if (investmentResults is not null && investmentResults.Count > 0)
    {
        <h4 class="text-success text-center mt-5">Investment Results:</h4>
        <div class="table-responsive">
            <table class="table table-bordered mt-3">
                <thead class="table-light">
                    <tr>
                        <th>Date:</th>
                        <th>Investment amount:</th>
                        <th>@(selectedCryptoSymbol) Amount:</th>
                        <th>Today's value in USD:</th>
                        <th>ROI (%):</th>
                        <th>Today's value in EUR:</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in investmentResults)
                    {
                        <tr>
                            <td>@result.Date.ToString("yyyy-MM-dd")</td>
                            <td>@result.InvestedAmount.ToString("C")</td>
                            <td>@result.CryptoAmount.ToString("F4")</td>
                            <td>@result.CurrentValueInUSD.ToString("C")</td>
                            <td>@result.ReturnOnInvestment.ToString("F2")%</td>
                            <td>@result.CurrentValueInEUR.ToString("C", new CultureInfo("fr-FR"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <h5 class="text-primary mt-4">Total Amount of @(selectedCryptoSymbol) Owned: @(totalCryptoAmount.ToString("F4"))</h5>
        <h5 class="text-primary mt-4">Total Value in EUR: @(investmentResults.Last().CurrentValueInEUR.ToString("C", new CultureInfo("fr-FR"))) </h5>

        <canvas id="investmentChart" width="400" height="200"></canvas>
    }
</div>

@code {
    private Dictionary<string, string> cryptocurrencies = [];
    private string selectedCryptoSymbol = "BTC";
    private DateTime startDate = DateTime.Today;
    private decimal monthlyInvestment = 100;
    private List<InvestmentResult> investmentResults = new();
    private decimal totalCryptoAmount = 0;
    private decimal eurConversionRate;

    protected override async Task OnInitializedAsync()
    {
        cryptocurrencies = await CryptoPriceService.GetCryptocurrencies();
        eurConversionRate = await CryptoPriceService.GetLatestEURConversionRate();
    }

    private async Task Calculate()
    {
        investmentResults.Clear();

        var currentCryptoPrice = await CryptoPriceService.GetLatestPrice(selectedCryptoSymbol);
        var currentCryptoPriceInEUR = currentCryptoPrice * eurConversionRate;
        DateTime currentDate = startDate;

        while (currentDate <= DateTime.Today)
        {
            var historicalPrice = await CryptoPriceService.GetHistoricalPrice(selectedCryptoSymbol, currentDate);
            if (historicalPrice > 0)
            {
                decimal investedAmount = monthlyInvestment;
                decimal cryptoAmount = investedAmount / historicalPrice;
                totalCryptoAmount += cryptoAmount;

                decimal currentValue = totalCryptoAmount * currentCryptoPrice;
                decimal currentValueInEUR = totalCryptoAmount * currentCryptoPriceInEUR;

                decimal roi = (investedAmount > 0)
                    ? ((currentValue - investedAmount) / investedAmount) * 100
                    : 0;

                investmentResults.Add(new InvestmentResult
                    {
                        Date = currentDate,
                        InvestedAmount = investedAmount,
                        CryptoAmount = cryptoAmount,
                        CurrentValueInUSD = currentValue,
                        CurrentValueInEUR = currentValueInEUR,
                        ReturnOnInvestment = roi
                    });
            }

            currentDate = currentDate.AddMonths(1);
        }

        if (investmentResults.Count > 0)
        {
            await DrawChart();
        }
    }

    private async Task DrawChart()
    {
        var chartData = new
        {
            labels = investmentResults.Select(r => r.Date.ToString("yyyy-MM-dd")).ToArray(),
            values = investmentResults.Select(r => r.CurrentValueInEUR).ToArray()
        };

        await JSRuntime.InvokeVoidAsync("drawChart", "investmentChart", chartData);
    }

    private sealed record InvestmentResult
    {
        public DateTime Date { get; init; }
        public decimal InvestedAmount { get; init; }
        public decimal CryptoAmount { get; init; }
        public decimal CurrentValueInUSD { get; init; }
        public decimal CurrentValueInEUR { get; init; }
        public decimal ReturnOnInvestment { get; init; }
    }
}
